
ifndef $(SETTINGS)
	SETTINGS=settings
endif

include make.$(SETTINGS)
include ../../../Makefile.user

#-------------------------------------------------------------------------------
# C++ Compiler and compiler options
#-------------------------------------------------------------------------------

CC               ?= g++ 
CFLAGS           := -std=c++11 -march=native -Wfatal-errors -g -DSILENT -O2
CFLAGS           += -fno-stack-protector -static 
#CFLAGS           += -isystem ../../../libraries/cxx-amd64/usr/include/c++/v1 
#CFLAGS           += -isystem ../../../libraries/cxx-amd64/usr/include
CFLAGS           += -fopenmp -specs "../../../libraries/cxx-amd64/usr/lib/musl-gcc.specs" 
#CFLAGS           += -I../../../kernel-amd64/ 
CFLAGS           += -MP -MMD -pipe -Wl,--eh-frame-hdr  
CFLAGS           += $(CPPFLAGS)
ifdef $(BENCH_ITERATIONS)
CFLAGS           += -DBENCH_ITERATIONS=${BENCH_ITERATIONS}
endif

AR               := ar
ARFLAGS          := rvs

APP_LIBS         := ../../../libraries/cxx-amd64/usr/lib/libomp.a ../../../libraries/cxx-amd64/usr/lib/libc++.a ../../../libraries/cxx-amd64/usr/lib/libc++abi.a ../../../libraries/cxx-amd64/usr/lib/libunwind.a ../../../libraries/cxx-amd64/usr/lib/libc.a -lgcc 
#-------------------------------------------------------------------------------
# Macro definition for directory paths
#-------------------------------------------------------------------------------

APPDIR       := applications
SRCDIR       := src
TARGETDIR    := run
OUTDIR       := output
TOOLDIR      := tools
BUILDDIR     := ${CURDIR}/build
DOCDIR       := documentation
PROTODIR     := prototypes


#-------------------------------------------------------------------------------
# C++ Macros for source, object, test and test object files
#-------------------------------------------------------------------------------

SOURCES      := $(shell find $(SRCDIR) -type f -name '*.cpp')
SOURCES      := $(sort $(SOURCES))
OBJECTS      := $(patsubst $(SRCDIR)/%,$(BUILDDIR)/%,$(SOURCES:.cpp=.o))
ifdef tNAME
	tNAME = $(tNAME)
else
	ifdef testName
		tNAME = $(testName)
	endif
	ifdef tN
		tNAME = $(tN)
	endif
endif
tNAME      ?= '*'

TESTSOURCES  := $(shell find $(SRCDIR) -type f -name '$(tNAME).test')
TESTSOURCES  := $(sort $(TESTSOURCES))
TESTOBJECTS  := $(patsubst $(SRCDIR)/%.test, $(BUILDDIR)/%.to, $(TESTSOURCES))
TESTRUNOBJ   += $(shell find $(BUILDDIR)/catch/ -type f -name '*.o')

#-------------------------------------------------------------------------------
# Macro for applications and targets
#-------------------------------------------------------------------------------
# prevent case sensitive issues, may requires a rework
ifdef aNAME
	aNAME = $(aNAME)
else
	ifdef applicationName
		aNAME = $(applicationName)
	endif
	ifdef aN
		aNAME = $(aN)
	endif
endif
aNAME      ?= '*'

APPS         := $(shell find $(APPDIR) -type f -name '$(aNAME).cpp')
APPS         := $(sort $(APPS))
TARGETS      := $(patsubst $(APPDIR)/%, $(TARGETDIR)/%, $(APPS:.cpp=.x))
#TARGETS      += $(patsubst $(APPDIR)/%, $(TARGETDIR)/%, $(APPS:.cpp=.a))

#-------------------------------------------------------------------------------
# Macro for prototype to build only a chosen application
#-------------------------------------------------------------------------------
# prevent case sensitive issues, may requires a rework
ifdef pNAME
	pNAME = $(pNAME)
else
	ifdef prototypeName
		pNAME = $(prototypeName)
	endif
	ifdef pN
		pNAME = $(pN)
	endif
endif
pNAME        ?= '*'

PROT         := $(shell find $(PROTODIR) -type f -name '$(pNAME).cpp')
PROT         := $(sort $(PROT))
PROT_TARGETS := $(patsubst $(PROTODIR)/%, $(TARGETDIR)/%,   $(PROT:.cpp=.x))
#PROT_TARGETS += $(patsubst $(PROTODIR)/%, $(TARGETDIR)/%,   $(PROT:.cpp=.a))

#-------------------------------------------------------------------------------
# Color definition for colored console output ----------------------------------
#-------------------------------------------------------------------------------

RED____=\033[0;31m
GREEN__=\033[0;32m
LGREEN_=\033[1;32m
BLUE___=\033[1;34m
YELLOW_=\033[1;33m
NOCOLOR=\033[0m # No Color

#-------------------------------------------------------------------------------
# Options ----------------------------------------------------------------------
#-------------------------------------------------------------------------------

# Standard options -------------------------------------------------------------
default:     tools .NDEBUG                      sources       prototype apps
cluster:     tracing .NDEBUG                    sources       prototype apps
clusterOMP:  tracing .OMPCLUSTER   clean        sources       prototype apps
all:         tools .NDEBUG         clean        sources tests prototype apps
debug:       tools .DEBUG                       sources tests prototype
prof:        tools .PROF                        sources                 apps
openmp:      tools .OPENMP         clean        sources       prototype apps

# Object, test and app macros --------------------------------------------------
sources:           echo_compiling               $(OBJECTS)
apps:              sources echo_applications    $(TARGETS)
tests:       tools sources echo_compiling_tests $(TESTOBJECTS) .bundleandruntest
prototype:         sources echo_prototype       $(PROT_TARGETS)

tt:
	@echo $(TESTOBJECTS)
	@echo ""
	@echo $(tNAME)
	@echo ""
	@echo $(TESTSOURCES)
	@echo ""
	@echo $(pNAME)
	@echo ""
	@echo $(PROT)


# Deleting all objects, executables and tests ----------------------------------
clean:
	@echo "";
	@echo "$(YELLOW_)##### Removing objects, applications, and tests ... \
	##############$(NOCOLOR)";
	@echo "";
	$(RM) -r $(OBJECTS) $(TESTOBJECTS) $(TARGETS) $(OBJECTSIMP) $(shell find \
	-type f -name '*.x'    )

# Deleting all created files ---------------------------------------------------
purge:
	@echo "";
	@echo "$(YELLOW_)##### Removing all objects, tests, results and run files \
	... #####$(NOCOLOR)";\
	$(RM) $(shell find -type f -name '*.a'    )           \
	$(RM) $(shell find -type f -name '*.o'    )           \
	$(RM) $(shell find -type f -name '*.to'   )           \
	$(RM) $(shell find -type f -name '*.x'    )           \
	$(RM) $(shell find -type f -name '*.d'    )           \
	$(RM) $(shell find -type f -name '*.imp'  )           \
	$(RM) $(shell find -type f -name '*.ll'   )           \
	$(RM) $(shell find -type f -name '*.out*' )           \
	$(RM) $(shell find -type f -name '*.optimized' )      \
	$(RM) -rf $(DOCDIR) $(TARGETDIR) $(BUILDDIR) $(OUTDIR);
	@echo "";

# Build Catch, Yaml, Tracing, Hypre --------------------------------------------
tools: directories

# Deleting executables ----------------------------------------------------------------
clean_run:
	@echo "";
	@echo "$(YELLOW_)##### Removing executables in /run ... \
	##########################################$(NOCOLOR)";\
	$(RM) $(shell find -type f -name '*.x'    )           \

# Echo options -----------------------------------------------------------------
echo_compiling:
	@echo "";
	@echo "$(YELLOW_)##### Compiling source code ... \
	##################################$(NOCOLOR)";
	@echo "";

echo_compiling_tests:
	@echo "";
	@echo "$(YELLOW_)##### Compiling tests ... \
	########################################$(NOCOLOR)";
	@echo "";

echo_applications:
	@echo "";
	@echo "$(YELLOW_)##### Compiling applications ... \
	#################################$(NOCOLOR)";
	@echo "";

echo_prototype:
	@echo "";
	@echo "$(YELLOW_)##### Compiling prototype ... \
	####################################$(NOCOLOR)";
	@echo "";

# Build documentation ----------------------------------------------------------
doc:
	@echo "";
	@echo "$(YELLOW_)##### Creating documentation ... \
	##################################$(NOCOLOR)";
	@echo "";
	doxygen Doxyfile

clean_doc:
		$(RM) -rf $(DOCDIR)

# Create directory for app and build -------------------------------------------
directories:
	@mkdir -p $(TARGETDIR)
	@mkdir -p $(BUILDDIR)


#-------------------------------------------------------------------------------
# Hidden options ---------------------------------------------------------------
#-------------------------------------------------------------------------------

# Debug compiler flags ---------------------------------------------------------
.DEBUG:
	$(eval CFLAGS += -O2 -g -pg -Wall -DDEBUG -fmax-errors=1)

# Final program compiler flags -------------------------------------------------
.NDEBUG:
	$(eval CFLAGS += -O2 )

# Bundling and execution of tests ----------------------------------------------
.bundleandruntest:
	@echo "files linked to test:"
	@echo $(TESTOBJECTS)
	@$(CC) $(CFLAGS) $(OBJECTS) $(TESTOBJECTS) $(TESTRUNOBJ) $(YAMLOBJECTS) -o \
	$(TARGETDIR)/test.x $(INCLUDE) $(LIBRARY)
	@cd $(TARGETDIR) && ./test.x

.PHONY: clean

.PROF:
	$(eval CFLAGS += -pg -O2 -no-pie)

.OPENMP:
	@echo "WARNING: NTHREADS needs to be set as input before": \
	$(eval CFLAGS += -O2 -fopenmp -DOPENMP -DTHREADSDEF=$(NTHREADS))

#-------------------------------------------------------------------------------
# Compilation Rules ------------------------------------------------------------
#-------------------------------------------------------------------------------

# C++ objects
$(BUILDDIR)/%.o: $(SRCDIR)/%.cpp
	@mkdir -p $(dir $@)
	@echo "$(CC) $(CFLAGS) $(INCLUDE) -c -o $@ \n\t $(LGREEN_) $< $(NOCOLOR)\n";
	@$(CC) $(CFLAGS) $(INCLUDE) -c -o $@ $<
	@$(CC) $(CFLAGS) $(INCLUDE) -MM $(SRCDIR)/$*.cpp > $(BUILDDIR)/$*.d
	@cp -f $(BUILDDIR)/$*.d $(BUILDDIR)/$*.d.tmp
	@sed -e 's|.*:|$(BUILDDIR)/$*.o:|' < $(BUILDDIR)/$*.d.tmp > $(BUILDDIR)/$*.d
	@sed -e 's/.*://' -e 's/\\$$//' < $(BUILDDIR)/$*.d.tmp | fmt -1 | \
	sed -e 's/^ *//' -e 's/$$/:/' >> $(BUILDDIR)/$*.d
	@rm -f $(BUILDDIR)/$*.d.tmp

# C++ test objects
$(BUILDDIR)/%.to: $(SRCDIR)/%.test $(SRCDIR)/%.cpp
	@mkdir -p $(dir $@)
	@echo "$(CC) $(CFLAGS) $(INCLUDE) -x c++ -c -o $@ \n\t $(BLUE___) $<       \
	$(NOCOLOR)\n";
	@$(CC) $(CFLAGS) $(INCLUDE) -x c++ -c -o $@ $<
	@$(CC) $(CFLAGS) $(INCLUDE) -x c++ -MM $(SRCDIR)/$*.test > $(BUILDDIR)/$*.d
	@cp -f $(BUILDDIR)/$*.d $(BUILDDIR)/$*.d.tmp
	@sed -e 's|.*:|$(BUILDDIR)/$*.o:|' < $(BUILDDIR)/$*.d.tmp > $(BUILDDIR)/$*.d
	@sed -e 's/.*://' -e 's/\\$$//' < $(BUILDDIR)/$*.d.tmp | fmt -1 | \
	sed -e 's/^ *//' -e 's/$$/:/' >> $(BUILDDIR)/$*.d
	@rm -f $(BUILDDIR)/$*.d.tmp


# Executables
$(TARGETDIR)/%.x: $(APPDIR)/%.cpp $(OBJECTS) $(YAMLOBJECTS)
	@mkdir -p $(TARGETDIR)
	@echo "$(CC) $(CFLAGS) $(OBJECTS) $(YAMLOBJECTS) -o $@ $(INCLUDE) \n\t \
	$(LGREEN_) $< $(NOCOLOR)\n -I$(SRCDIR) $(LIBRARY) \n"
	@$(CC) $(CFLAGS) $(OBJECTS) $(YAMLOBJECTS) $< -o $@  $(INCLUDE) \
	-I$(SRCDIR) $(LIBRARY)

# Executables library
$(TARGETDIR)/%.a: $(APPDIR)/%.cpp $(OBJECTS) $(YAMLOBJECTS)
	@mkdir -p $(TARGETDIR)
	@echo "@$(AR) $(ARFLAGS) $@ $(OBJECTS) $(YAMLOBJECTS)\n"
	@$(AR) $(ARFLAGS) $@ $(OBJECTS) $(YAMLOBJECTS)

# Protottypes
$(TARGETDIR)/%.x: $(PROTODIR)/%.cpp $(OBJECTS) $(YAMLOBJECTS)
	@mkdir -p $(TARGETDIR)
	#@echo "$(CC) $(CFLAGS)  $(OBJECTS) $(YAMLOBJECTS) -o $@ $(INCLUDE) \n\t \
	#$(LGREEN_) $< $(NOCOLOR) \n -I$(SRCDIR) $(LIBRARY)\n"
	$(CC) $(CFLAGS) $(OBJECTS) $(YAMLOBJECTS) $< -o $@ $(INCLUDE) \
	-I$(SRCDIR) $(LIBRARY) $(APP_LIBS)
	@echo "done"

# C++ objects
$(PROTODIR)/%.o: $(PROTODIR)/%.cpp
	@mkdir -p $(dir $@)
#	@echo "$(CC) $(CFLAGS) -c -o  $@  $< $(APP_LIBS)\n";
	$(CC) $(CFLAGS) -c -o  $@  $< 

# Protottypes library
$(TARGETDIR)/%.a: $(PROTODIR)/%.o $(OBJECTS) $(YAMLOBJECTS)
	@mkdir -p $(TARGETDIR)
	@echo "$(AR) $(ARFLAGS) $@ $(OBJECTS) $< $(YAMLOBJECTS)\n"
	@$(AR) $(ARFLAGS) $@ $(OBJECTS) $< $(YAMLOBJECTS)

